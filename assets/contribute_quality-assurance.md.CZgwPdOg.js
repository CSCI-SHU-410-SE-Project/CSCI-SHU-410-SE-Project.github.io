import{_ as e,c as s,o as t,ag as i}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"Quality Assurance","description":"","frontmatter":{},"headers":[],"relativePath":"contribute/quality-assurance.md","filePath":"contribute/quality-assurance.md","lastUpdated":1747172293000}'),n={name:"contribute/quality-assurance.md"};function o(r,a,l,h,p,c){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="quality-assurance" tabindex="-1">Quality Assurance <a class="header-anchor" href="#quality-assurance" aria-label="Permalink to &quot;Quality Assurance&quot;">​</a></h1><p>Before submitting a pull request, it is recommended to run several quality assurance checks to ensure that your changes are in good shape. These quality assurance checks are also enforced in the CI. We understand that some rules are opinionated and can be counter-productive in certain cases, but please try to follow them as much as possible for consistency of the Deskulpt codebase.</p><h2 id="formatting" tabindex="-1">Formatting <a class="header-anchor" href="#formatting" aria-label="Permalink to &quot;Formatting&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> format</span></span></code></pre></div><p>This will run <a href="https://rust-lang.github.io/rustfmt/" target="_blank" rel="noreferrer">rustfmt</a> on Rust sources and <a href="https://prettier.io/" target="_blank" rel="noreferrer">prettier</a> on JavaScript, TypeScript, Markdown, and other assets. Automatic fixes will be applied. To run them separately, you can also use the following commands:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> format:rs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> format:js</span></span></code></pre></div><p>If you only want to check for formatting errors without applying automatic fixes, append <code>:check</code> to each of the commands above.</p><h2 id="linting" tabindex="-1">Linting <a class="header-anchor" href="#linting" aria-label="Permalink to &quot;Linting&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span></span></code></pre></div><p>This will run <a href="https://doc.rust-lang.org/clippy/" target="_blank" rel="noreferrer">clippy</a> on Rust sources and <a href="https://oxc.rs/docs/guide/usage/linter" target="_blank" rel="noreferrer">oxlint</a> on JavaScript and TypeScript sources. Automatic fixes will be applied where possible. To run them separately, you can also use the following commands:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint:rs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint:js</span></span></code></pre></div><p>If you only want to check for linting errors without applying automatic fixes, append <code>:check</code> to each of the commands above.</p><h2 id="pre-commit-hooks" tabindex="-1">Pre-Commit Hooks <a class="header-anchor" href="#pre-commit-hooks" aria-label="Permalink to &quot;Pre-Commit Hooks&quot;">​</a></h2><p>Deskulpt uses <a href="https://typicode.github.io/husky/" target="_blank" rel="noreferrer">husky</a> to register some of the quality assurance checks as pre-commit hooks, so that they are automatically run on the files you commit every time. These pre-commit hooks are automatically registered when you run <code>pnpm install</code>.</p><p>There are circumstances where you may not want these hooks to run for certain commits. In such cases, you can use the <a href="https://git-scm.com/docs/git-commit#Documentation/git-commit.txt-code-ncode" target="_blank" rel="noreferrer"><code>-n</code> flag</a> to bypass the hooks:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR COMMIT MESSAGE&quot;</span></span></code></pre></div><p>However, note that the CI pipeline still enforces all checks on the pull requests, so bypassing hooks locally should only be the exception.</p>`,17)]))}const k=e(n,[["render",o]]);export{d as __pageData,k as default};
